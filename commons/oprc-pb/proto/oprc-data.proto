syntax = "proto3";
package oprc;


option java_multiple_files = true;
option java_package = "org.hpcclab.oaas.proto";

service DataService {
  rpc Get (SingleObjectRequest) returns (ObjectResponse);
  rpc GetValue (SingleKeyRequest) returns (ValueResponse);
  rpc Delete (SingleObjectRequest) returns (EmptyResponse);
  rpc Set (SetObjectRequest) returns (EmptyResponse);
  rpc SetValue (SetKeyRequest) returns (EmptyResponse);
  rpc Merge (SetObjectRequest) returns (ObjectResponse);
  rpc Stats (StatsRequest) returns (StatsResponse);
}
message EmptyResponse {

}

message StatsRequest {
}


message StatsResponse {
  repeated ShardStats shards = 1;
}

message ShardStats {
  string collection = 1;
  uint32 partition_id = 2;
  uint64 shard_id = 3;
  uint64 count = 4;
}

message ValueResponse {
  ValData value = 1;
}

message ObjectResponse {
  ObjData obj = 1;
}


message ObjData {
  optional ObjMeta metadata = 1;
  map<uint32, ValData> entries = 2;
  // uint64 last_updated = 3;
  optional ObjectEvent event = 3;
}

message ObjectEvent {
  map<string, FuncTrigger> func_trigger = 1;
  map<uint32, DataTrigger> data_trigger = 2;
}

message FuncTrigger {
  repeated TriggerTarget on_complete = 1;
  repeated TriggerTarget on_error = 2;
}

message DataTrigger {
  repeated TriggerTarget on_create = 1;
  repeated TriggerTarget on_update = 2;
  repeated TriggerTarget on_delete = 3;  
}

message TriggerTarget {
  string cls_id = 1;
  uint32 partition_id = 2;
  optional uint64 object_id = 3;
  string fn_id = 4;
  map<string, string> req_options = 5;
}

// Event triggering system payload structures
message TriggerPayload {
  EventInfo event_info = 1;
  optional bytes original_payload = 3;
}

message EventInfo {
  // Source object information
  string source_cls_id = 1;
  uint32 source_partition_id = 2;
  uint64 source_object_id = 3;
  
  // Event type and details
  EventType event_type = 4;
  optional string fn_id = 5;  // For function events
  optional uint32 key = 6;    // For data events
  
  // Timing information
  uint64 timestamp = 7;
  
  // Additional context
  map<string, string> context = 8;
}

enum EventType {
  EVENT_TYPE_UNKNOWN = 0;
  // Function events
  EVENT_TYPE_FUNC_COMPLETE = 1;
  EVENT_TYPE_FUNC_ERROR = 2;
  // Data events  
  EVENT_TYPE_DATA_CREATE = 3;
  EVENT_TYPE_DATA_UPDATE = 4;
  EVENT_TYPE_DATA_DELETE = 5;
}

enum TriggerType {
  TRIGGER_TYPE_UNKNOWN = 0;
  TRIGGER_TYPE_FUNCTION = 1;
  TRIGGER_TYPE_DATA = 2;
}


message ObjMeta {
  string cls_id = 1;
  uint32 partition_id = 2;
  uint64 object_id = 3;
}

message ValData {
  bytes data = 1;
  ValType type = 2;
}

enum ValType {
  VAL_TYPE_BYTE = 0;
  VAL_TYPE_CRDT_MAP = 1;
  // VAL_TYPE_UNKNOWN = 2;
}


message SingleObjectRequest {
  string cls_id = 1;
  uint32 partition_id = 2;
  uint64 object_id = 3;
}

message SingleKeyRequest {
  string cls_id = 1;
  uint32 partition_id = 2;
  uint64 object_id = 3;
  uint32 key = 4;
}


message SetKeyRequest {
  string cls_id = 1;
  int32 partition_id = 2;
  uint64 object_id = 3;
  uint32 key = 4;
  ValData value = 5;
}

message SetObjectRequest {
  string cls_id = 1;
  int32 partition_id = 2;
  uint64 object_id = 3;
  ObjData object = 4;
}

message CreateCollectionRequest{
  string name = 1;
  int32 partition_count = 2;
  int32 replica_count = 3;
  repeated ShardAssignment shard_assignments = 4;
  string shard_type = 6;
  map<string, string> options = 7;
  optional InvocationRoute invocations = 8;
}

// ShardAssignment represents the assignment of shards to nodes in a single paritition.
message ShardAssignment {
  // primary is the shard ID of primary replica
  optional uint64 primary = 1;
  // Node IDs of the replicas
  repeated uint64 replica = 2;
  // Shard IDs for each replica
  repeated uint64 shard_ids = 3;
}

message InvocationRoute{
  map<string,FuncInvokeRoute> fn_routes = 1;
  repeated string disabled_fn = 2;
}

message FuncInvokeRoute {
  string url =1;
  bool stateless = 2;
  bool standby = 3;
  repeated uint64 active_group = 4;
}


message CreateCollectionResponse {
  string name = 1;
}


message ShardGroup {
  repeated uint64 shard_ids = 1;
}
