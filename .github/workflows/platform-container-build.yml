name: Platform Container Build

on:
  push:
    branches: 
     - "**"
    tags:
      - '*'

jobs:
  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up metadata
        id: meta
        run: |
          # Set version tag based on git ref
          VERSION=${GITHUB_REF#refs/*/}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=${GITHUB_REF#refs/heads/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE_PREFIX=ghcr.io/${{ github.repository_owner }}/oaas-rs" >> $GITHUB_ENV
          
      - name: Build images with docker-compose
        env:
          IMAGE_VERSION: latest
        run: |
          docker compose -f docker-compose.release.yml build --pull
          
      - name: Tag and push images
        run: |
          # List of services from docker-compose
          SERVICES=(pm crm router odgm echo-fn random-fn num-log-fn)

          # Only push :latest when running on the main branch
          PUSH_LATEST=false
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            PUSH_LATEST=true
          fi

          # Tag and push each service
          for service in "${SERVICES[@]}"; do
            echo "Processing $service..."
            # Tag with version
            docker tag ${IMAGE_PREFIX}/$service:latest ${IMAGE_PREFIX}/$service:$VERSION
            # Push images
            if [ "$PUSH_LATEST" = true ]; then
              docker push ${IMAGE_PREFIX}/$service:latest
            else
              echo "Skipping push of ${IMAGE_PREFIX}/$service:latest (not main branch)"
            fi
            docker push ${IMAGE_PREFIX}/$service:$VERSION
          done