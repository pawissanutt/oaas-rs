1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "oprc-pm.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "oprc-pm.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "oprc-pm.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "oprc-pm.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. PM Configuration Summary:
   - Storage Type: {{ .Values.config.storage.type }}
   {{- if eq .Values.config.storage.type "etcd" }}
   {{- if and .Values.etcd.enabled .Values.config.storage.etcd.useSubchart }}
   - Etcd: Embedded ({{ .Values.etcd.replicaCount }} replicas)
   {{- else }}
   - Etcd: External ({{ .Values.config.storage.etcd.endpoints }})
   {{- end }}
   {{- end }}
   - CRM URL: {{ .Values.config.crm.default.url }}
   - Max Retries: {{ .Values.config.deployment.maxRetries }}
   - Rollback on Partial: {{ if .Values.config.deployment.rollbackOnPartial }}Enabled{{ else }}Disabled{{ end }}
   - Package Cascade Delete: {{ if .Values.config.package.deleteCascade }}Enabled{{ else }}Disabled{{ end }}

3. Check the status of your deployment:
   kubectl get pods --namespace {{ .Release.Namespace }} -l app.kubernetes.io/name={{ include "oprc-pm.name" . }}
   kubectl get svc --namespace {{ .Release.Namespace }} {{ include "oprc-pm.fullname" . }}

4. View logs:
   kubectl logs --namespace {{ .Release.Namespace }} -l app.kubernetes.io/name={{ include "oprc-pm.name" . }}

5. Health check:
   kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "oprc-pm.fullname" . }} 8080:8080
   curl http://localhost:8080/health

6. Test the API:
   # List packages
   curl http://localhost:8080/api/v1/packages
   
   # List deployments
   curl http://localhost:8080/api/v1/deployments
   
   # Check clusters
   curl http://localhost:8080/api/v1/clusters/health

7. API Documentation:
   Base URL: /api/v1
   - Packages: GET/POST/DELETE /packages
   - Deployments: GET/POST/DELETE /deployments
   - Deployment Records: GET /deployment-records
   - Clusters: GET /clusters, GET /clusters/health

{{- if eq .Values.config.storage.type "etcd" }}
8. Etcd Storage Configuration:
   - Endpoints: {{ .Values.config.storage.etcd.endpoints }}
   - TLS Insecure: {{ .Values.config.storage.etcd.tls.insecure }}
{{- end }}

{{- if ne .Values.config.crm.default.url "http://oprc-crm:8088" }}
NOTE: Using custom CRM URL: {{ .Values.config.crm.default.url }}
Make sure the CRM service is accessible at this endpoint.
{{- end }}

{{- if and .Values.etcd.enabled .Values.config.storage.etcd.useSubchart }}
9. Etcd Cluster Information:
   - Replicas: {{ .Values.etcd.replicaCount }}
   - Persistence: {{ if .Values.etcd.persistence.enabled }}Enabled ({{ .Values.etcd.persistence.size }}){{ else }}Disabled{{ end }}
   - Authentication: {{ if .Values.etcd.auth.rbac.create }}RBAC Enabled{{ else }}No Authentication{{ end }}
   
   # Check etcd cluster status
   kubectl get pods -l app.kubernetes.io/name=etcd --namespace {{ .Release.Namespace }}
   
   # Access etcd directly (for debugging)
   kubectl exec -it {{ include "oprc-pm.fullname" . }}-etcd-0 --namespace {{ .Release.Namespace }} -- etcdctl member list
{{- end }}

{{- if eq .Values.config.storage.type "etcd" }}
{{- if not .Values.etcd.enabled }}
NOTE: Using external etcd cluster at: {{ .Values.config.storage.etcd.endpoints }}
Make sure the etcd cluster is accessible and properly configured.
{{- end }}
{{- end }}

For more information, visit: https://github.com/pawissanutt/oaas-rs
