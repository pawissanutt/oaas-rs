services:

  gateway:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: oprc-gateway
    image: ${IMAGE_PREFIX}/gateway
    ports:
      - "10000:80"
    depends_on: 
      - dev-pm
    environment:
      HTTP_PORT: 80
      RUST_LOG: INFO
      OPRC_PM_URI: http://dev-pm:80
      OPRC_MAX_POOL_SIZE: 256
  

  router:
    deploy:
      replicas: 1
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: oprc-router
    image: ${IMAGE_PREFIX}/router
    # network_mode: "host"
    ports:
      - "7447:7447"
    environment:
      OPRC_LOG: "INFO"
      OPRC_ZENOH_PORT: "7447"
  

  odgm-1: &odgm
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: oprc-odgm
    deploy:
      resources:
        reservations:
          cpus: "8"
        limits:
          cpus: "8"
    image: ${IMAGE_PREFIX}/odgm
    # network_mode: "host"
    # ports:
    #   - "18001:8080"
    environment: &odgm_env
      ODGM_LOG: INFO,openraft=info,zenoh=info,h2=warn
      ODGM_NODE_ID: 1
      ODGM_MAX_SESSIONS: 4
      ODGM_MEMBERS: "1,2,3"
      # OPRC_ZENOH_BUFFER_SIZE: "1073741824"
      # OPRC_ZENOH_MAX_LINKS: "64"
      ODGM_COLLECTION: |
        [
          {"name":"example.record","partition_count":8,"replica_count":3,"shard_assignments":[], "shard_type":"mst",
          "invocations": {
            "fn_routes": {
              "echo": {"url":"http://echo-fn", "stateless": true, "standby": false, "active_group": []},
              "random": {"url":"http://random-fn", "stateless": false, "standby": false, "active_group": []},
              "log": {"url":"http://num-log-fn", "stateless": false, "standby": false, "active_group": []}
            }
          },
          "options":{}}
        ]
    

  odgm-2:
    <<: *odgm
    environment: 
      <<: *odgm_env
      ODGM_NODE_ID: 2  

  odgm-3:
    <<: *odgm
    environment: 
      <<: *odgm_env
      ODGM_NODE_ID: 3

  echo-fn:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: dev-echo-fn
    image: ${IMAGE_PREFIX}/echo-fn
    ports:
      - "10001:80"
    environment:
      HTTP_PORT: 80
      # RUST_LOG: INFO

      
  random-fn:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: dev-random-fn
    image: ${IMAGE_PREFIX}/random-fn
    ports:
      - "10002:80"
    environment:
      HTTP_PORT: 80
      RUST_LOG: "info,h2=warn,zenoh=info"

  num-log-fn:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: dev-num-log-fn
    image: ${IMAGE_PREFIX}/num-log-fn
    ports:
      - "10003:80"
    environment:
      HTTP_PORT: 80
      RUST_LOG: "info,h2=warn"
  
  dev-pm:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: dev-pm
    image: ${IMAGE_PREFIX}/dev-pm
    # ports:
    #   - "11000:80"
    environment:
      HTTP_PORT: 80
      RUST_LOG: INFO
      PM_CLS_LIST: "example!echo=http://echo-fn:80"
      # PM_CLS_LIST: "example!echo=localhost:8080|other=localhost:8080,"
      # result: {"example2": {"echo": "localhost:8080", "other": "localhost:8080"}, "example": {"echo": "localhost:8080", "other": "localhost:8080"}}
