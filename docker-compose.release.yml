services:

  gateway:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: oprc-gateway
    image: ${IMAGE_PREFIX}/gateway
    ports:
      - "10000:80"
    depends_on: 
      - dev-pm
    environment:
      HTTP_PORT: 80
      RUST_LOG: INFO
      OPRC_PM_URI: http://dev-pm:80
      OPRC_MAX_POOL_SIZE: 256
  

  router:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: oprc-router
    image: ${IMAGE_PREFIX}/router
    ports:
      - "7447:7447"
    environment:
      OPRC_LOG: "INFO"
      OPRC_ZENOH_PORT: "7447"
  

  odgm-1:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: oprc-odgm
    image: ${IMAGE_PREFIX}/odgm
    ports:
      - "18001:8080"
    environment:
      ODGM_LOG: INFO,openraft=info,zenoh=info,h2=warn
      # OPRC_ZENOH_PEER: "tcp/router:7447"
      ODGM_NODE_ID: 1
      ODGM_COLLECTION: &odgm_collection |
        [
          {"name":"example","partition_count":4,"replica_count":3,"shard_assignments":[
            {"replica":[1,2,3],"shard_ids":[1,2,3]},
            {"replica":[1,2,3],"shard_ids":[4,5,6]},
            {"replica":[1,2,3],"shard_ids":[7,8,9]},
            {"replica":[1,2,3],"shard_ids":[10,11,12]}
          ], "shard_type":"raft","options":{}}
        ]

  odgm-2:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: oprc-odgm
    image: ${IMAGE_PREFIX}/odgm
    ports:
      - "18002:8080"
    environment:
      ODGM_LOG: INFO,openraft=info,zenoh=info,h2=warn
      # OPRC_ZENOH_PEER: "tcp/router:7447"
      ODGM_NODE_ID: 2
      ODGM_COLLECTION: *odgm_collection

  odgm-3:
    deploy:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: oprc-odgm
    image: ${IMAGE_PREFIX}/odgm
    ports:
      - "18003:8080"
    environment:
      ODGM_LOG: INFO,openraft=info,zenoh=info,h2=warn
      # OPRC_ZENOH_PEER: "tcp/router:7447"
      ODGM_NODE_ID: 3
      ODGM_COLLECTION: *odgm_collection

  echo-fn:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: dev-echo-fn
    image: ${IMAGE_PREFIX}/echo-fn
    ports:
      - "10001:80"
    environment:
      HTTP_PORT: 80
      # RUST_LOG: INFO
  
  dev-pm:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        APP_NAME: dev-pm
    image: ${IMAGE_PREFIX}/dev-pm
    ports:
      - "10002:80"
    environment:
      HTTP_PORT: 80
      RUST_LOG: INFO
      PM_CLS_LIST: "example!echo=http://echo-fn:80"
      # PM_CLS_LIST: "example!echo=localhost:8080|other=localhost:8080,"
      # result: {"example2": {"echo": "localhost:8080", "other": "localhost:8080"}, "example": {"echo": "localhost:8080", "other": "localhost:8080"}}

  # ui:
  #   image: fullstorydev/grpcui:latest
  #   depends_on:
  #     - gateway
  #   ports:
  #     - 8080:80
  #   command: ["-plaintext", "-port", "80", "gateway:80"]