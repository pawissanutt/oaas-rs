# Default values for oprc-crm
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/pawissanutt/oaas-rs/crm
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "oprc-crm"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8088
  targetPort: 8088
  name: http
  # NodePort configuration (only used when type: NodePort)
  nodePort: 30088  # Optional: specify nodePort (30000-32767 range)

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: crm.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# CRM specific configuration
config:
  # HTTP port for gRPC+HTTP server
  httpPort: 8088
  
  # Kubernetes namespace for CRD operations
  namespace: default
  
  # Feature flags
  features:
    # Enable ODGM addon support
    odgm: true
    # Enable Knative template support
    knative: false
    # Enable Prometheus metrics provider
    prometheus: false
    # Enable NFR enforcement
    nfrEnforcement: false
    # Enable HPA support
    hpa: false
  
  # NFR Enforcement configuration
  enforcement:
    # Stability window in seconds before applying recommendations
    stabilitySeconds: 300
    # Cooldown period in seconds after applying changes
    cooldownSeconds: 600
  
  # Analyzer configuration
  analyzer:
    # Interval between analyzer runs in seconds
    intervalSeconds: 60
  
  # Environment profile (dev, edge, full)
  profile: dev

# RBAC configuration
rbac:
  # Specifies whether RBAC resources should be created
  create: true
  
# CRD installation
crd:
  # CRDs are managed externally via crdgen (see deploy.sh). Chart no longer installs CRDs.
  create: false
  # Keep CRDs on chart deletion (legacy knob; no-op when create=false)
  keep: true

# Logging configuration
logging:
  level: info
  format: json

# Operators Configuration
prometheus:
  operator:
    # Enable Prometheus Operator for advanced monitoring
    enabled: false
    # Configure if CRM should create ServiceMonitor resources
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s
      labels: {}
    # Configure if CRM should create PrometheusRule resources
    prometheusRule:
      enabled: true
      labels: {}
      rules:
        # Example rule for deployment failures
        - alert: CRMDeploymentFailures
          expr: increase(crm_deployment_failures_total[5m]) > 0
          for: 1m
          labels:
            severity: warning
          annotations:
            summary: "CRM deployment failures detected"
            description: "CRM has recorded {{ $value }} deployment failures in the last 5 minutes"

# Knative block removed (manage externally using deploy-knative.ps1)

# Router configuration for Zenoh messaging
router:
  enabled: true
  replicas: 1
  
  image:
    repository: ghcr.io/pawissanutt/oaas-rs/router
    tag: "latest"
    pullPolicy: Always
  
  # Logging configuration
  logLevel: "info"
  
  # Zenoh configuration
  zenoh:
    port: 17447
    peers: ""  # Optional: comma-separated list of peers like "tcp/router-0:17447,tcp/router-1:17447"
    gossipEnabled: true
    scoutingMulticastEnabled: false
  
  # Host port configuration for direct external access
  hostPort:
    enabled: false
    port: 17447
  
  # Service configuration
  service:
    type: ClusterIP
    clusterIP: ""  # Optional: set to "None" for headless service
    nodePort: ""   # Optional: specify nodePort when type is NodePort
  
  # Resource limits and requests
  resources:
    limits:
      cpu: "8"
      # memory: "512Mi"
    requests:
      cpu: "0.25"
      memory: "256Mi"
  
  # Node selector for pod placement
  nodeSelector: {}
    # kubernetes.io/hostname: "oaas1"
  
  # Pod affinity/anti-affinity rules
  affinity: {}
    # Default anti-affinity is configured in template if not specified
  
  # Tolerations for node taints
  tolerations: []
  
  # Health checks
  livenessProbe:
    enabled: false
    config: {}
  
  readinessProbe:
    enabled: false
    config: {}
  
  # Additional environment variables
  extraEnv: {}
    # CUSTOM_VAR: "value"
  
  # Volume mounts and volumes
  volumeMounts: []
  volumes: []
  
  # Image pull secrets
  imagePullSecrets: []
