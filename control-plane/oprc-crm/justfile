set shell := ["pwsh.exe", "-NoLogo", "-Command"]

# Integration testing helpers for oprc-crm (kind or k3d + Prometheus Operator CRDs)
# Usage examples:
#   just it-k3d-up
#   just it-k3d-test
#   just it-k3d-down
#   just it-k3d-all
#
# Requirements:
# - kind (https://kind.sigs.k8s.io/) or k3d (optional)
# - kubectl
# - cargo + rust toolchain
# - Prometheus Operator CRDs will be installed via CRD-only manifest

# Cluster name for the ephemeral cluster
CLUSTER := "oaas-crm-it"

# API port to expose the Kubernetes apiserver on localhost (kind)
API_PORT := "6550"

# Prometheus Operator CRDs (stripped-down) URL
CRDS_URL := "https://github.com/prometheus-operator/prometheus-operator/releases/latest/download/stripped-down-crds.yaml"

# Optional extra args to pass to kind/k3d
KIND_ARGS := ""
K3D_ARGS := ""

# Create k3d cluster and install Prometheus Operator CRDs
# kind: create a cluster and install Prometheus Operator CRDs
it-kind-up:
    Write-Host "[it] Creating kind cluster: {{CLUSTER}}"
    kind create cluster --name {{CLUSTER}} {{KIND_ARGS}}
    @echo "[it] Applying Prometheus Operator CRDs"
    kubectl apply -f {{CRDS_URL}}
    @echo "[it] Waiting for CRDs to be established"
    kubectl wait --for=condition=Established --timeout=120s crd/servicemonitors.monitoring.coreos.com || true
    kubectl wait --for=condition=Established --timeout=120s crd/podmonitors.monitoring.coreos.com || true
    @echo "[it] Generating and applying DeploymentRecord CRD"
    cargo run -p oprc-crm --bin crdgen | tee ../../k8s/crds/deploymentrecords.gen.yaml | kubectl apply -f -
    kubectl wait --for=condition=Established --timeout=120s crd/deploymentrecords.oaas.io || true

# Run feature-gated integration tests (ignored by default)
it-kind-test:
    @echo "[it] Building tests with feature it-k8s"
    cargo test -p oprc-crm --no-run --features it-k8s
    @echo "[it] Running operator integration tests (ignored by default)"
    cargo test -p oprc-crm --features it-k8s --test it_k8s -- --ignored
    cargo test -p oprc-crm --features it-k8s --test it_controller -- --ignored

# Delete the kind cluster
it-kind-down:
    @echo "[it] Deleting kind cluster: {{CLUSTER}}"
    kind delete cluster --name {{CLUSTER}}

# End-to-end: up -> test -> down (kind)
it-kind-all:
    just it-kind-up
    just it-kind-test
    just it-kind-down

# Keep k3d helpers (optional) for Docker users
it-k3d-up:
    @echo "[it] Creating k3d cluster: {{CLUSTER}}"
    k3d cluster create {{CLUSTER}} --api-port {{API_PORT}} {{K3D_ARGS}}
    @echo "[it] Merging kubeconfig and switching context"
    k3d kubeconfig merge {{CLUSTER}} --switch-context
    @echo "[it] Applying Prometheus Operator CRDs"
    kubectl apply -f {{CRDS_URL}}
    @echo "[it] Waiting for CRDs to be established"
    kubectl wait --for=condition=Established --timeout=120s crd/servicemonitors.monitoring.coreos.com || true
    kubectl wait --for=condition=Established --timeout=120s crd/podmonitors.monitoring.coreos.com || true
    @echo "[it] Generating and applying DeploymentRecord CRD"
    cargo run -p oprc-crm --bin crdgen | tee ../../k8s/crds/deploymentrecords.gen.yaml | kubectl apply -f -
    kubectl wait --for=condition=Established --timeout=120s crd/deploymentrecords.oaas.io || true

it-k3d-test:
    @echo "[it] Building tests with feature it-k8s"
    cargo test -p oprc-crm --no-run --features it-k8s
    @echo "[it] Running k3d integration tests (ignored by default)"
    cargo test -p oprc-crm --features it-k8s --test it_k8s -- --ignored
    cargo test -p oprc-crm --features it-k8s --test it_controller -- --ignored

it-k3d-down:
    @echo "[it] Deleting k3d cluster: {{CLUSTER}}"
    k3d cluster delete {{CLUSTER}}

it-k3d-all:
    just it-k3d-up
    just it-k3d-test
    just it-k3d-down
